Setting-up Threads
-------------------

Creating Threads
To use threads, we need to first create them. In the Java language framework, there are multiple ways of setting up threads.



Runnable Interface:

When we create a thread, we need to provide the created thread code to execute, or in other words we need to tell the thread what task to execute.
The code can be provided as an object of a class that implements the Runnable interface.
As the name implies, the interface forces the implementing class to provide a run method which in turn is invoked by the thread when it starts.

The runnable interface is the basic abstraction to represent a logical task in Java.

class Demonstration {
    public static void main( String args[] ) {
        Thread t = new Thread(new Runnable() {

            public void run() {
                System.out.println("Say Hello");
            }
        });
        t.start();
    }
}
----------------------------
We defined an anonymous class inside the Thread class’s constructor and an instance of it is instantiated and passed into the Thread object.
Personally, I feel anonymous classes decrease readability and would prefer to create a separate class implementing the Runnable interface.
An instance of the implementing class can then be passed into the Thread object’s constructor. Let’s see how that could have been done.

class Demonstration {
    public static void main( String args[] ) {

        ExecuteMe executeMe = new ExecuteMe();
        Thread t = new Thread(executeMe);
        t.start();
    }
}

class ExecuteMe implements Runnable {

  public void run() {
    System.out.println("Say Hello");
  }

}

__________________________
Subclassing Thread class:
The second way to set up threads is to subclass the Thread class itself as shown below.

class Demonstration {
    public static void main( String args[] ) throws Exception {
        ExecuteMe executeMe = new ExecuteMe();
        executeMe.start();
        executeMe.join();

    }
}

class ExecuteMe extends Thread {

  @Override
  public void run() {
    System.out.println("I ran after extending Thread class");
  }

}
The con of the second approach is that one is forced to extend the Thread class which limits code’s flexibility.
Passing in an object of a class implementing the Runnable interface may be a better choice in most cases.

link: https://jenkov.com/tutorials/java-concurrency/creating-and-starting-threads.html#java-threads-video-tutorial
Subclass or Runnable?
There are no rules about which of the two methods that is the best. Both methods works.
Personally though, I prefer implementing Runnable, and handing an instance of the implementation to a Thread instance.
When having the Runnable's executed by a thread pool it is easy to queue up the Runnable instances until a thread from the pool
is idle. This is a little harder to do with Thread subclasses.

Sometimes you may have to implement Runnable as well as subclass Thread. For instance, if creating a subclass of Thread that
can execute more than one Runnable. This is typically the case when implementing a thread pool.
