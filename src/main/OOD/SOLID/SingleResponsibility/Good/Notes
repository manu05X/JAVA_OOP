If we notice, the Invoice class violates the SRP in multiple ways:

The Invoice class is about invoices, but we have added print and storage functionality inside it. This breaks the SRP rule, which states, "A class should have only one reason to change."

If we want to change the logic of the printing or storage functionality in the future, we would need to change the class.

Instead of modifying the Invoice class for these uses, we can create two new classes for printing and persistence logic: InvoicePrinter and InvoiceStorage, and move the methods accordingly


Conclusion
When a class performs one task, it contains a small number of methods and member variables that are self-explanatory. SRP achieves this goal, and due to this, our classes are more usable, and they provide easier maintenance.


_________________________
import java.util.UUID;

class Book {
    private String name;
    private String authorName;
    private int year;
    private double price;
    private UUID isbn;

    public Book(String name, String authorName, int year, double price) {
        this.name = name;
        this.authorName = authorName;
        this.year = year;
        this.price = price;
        this.isbn = UUID.randomUUID();
    }

    // Getters and other methods related to Book

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

class Invoice {
    private Book book;
    private int quantity;
    private double discount;
    private double tax;

    public Invoice(Book book, int quantity, double discount, double tax) {
        this.book = book;
        this.quantity = quantity;
        this.discount = discount;
        this.tax = tax;
    }

    public double calculateTotal() {
        double price = ((book.getPrice() - book.getPrice() * discount) * this.quantity);
        return price * (1 + tax);
    }

    // Getters and setters for Invoice class

    public Book getBook() {
        return book;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getDiscount() {
        return discount;
    }

    public double getTax() {
        return tax;
    }

    // Other getters and setters

}

class InvoicePrinter {
    public void printInvoice(Invoice invoice) {
        System.out.println(invoice.getQuantity() + "x " + invoice.getBook().getName() + " " + invoice.getBook().getPrice() + "$");
        System.out.println("Discount Rate: " + invoice.getDiscount());
        System.out.println("Tax Rate: " + invoice.getTax());
        System.out.println("Total: " + invoice.calculateTotal());
    }
}

class InvoiceStorage {
    public void saveToDatabase(Invoice invoice) {
        // Database-saving logic here
        System.out.println("Invoice saved to the database.");
    }
}

public class Main {
    public static void main(String[] args) {
        Book book = new Book("The Java Programming Language", "James Gosling", 2022, 49.99);
        Invoice invoice = new Invoice(book, 2, 0.1, 0.05);

        InvoicePrinter invoicePrinter = new InvoicePrinter();
        InvoiceStorage invoiceStorage = new InvoiceStorage();

        invoicePrinter.printInvoice(invoice);
        invoiceStorage.saveToDatabase(invoice);
    }
}




